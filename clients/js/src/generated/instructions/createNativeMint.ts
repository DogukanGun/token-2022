/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  getStructDecoder,
  getStructEncoder,
  getU8Decoder,
  getU8Encoder,
  transformEncoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type IAccountMeta,
  type IAccountSignerMeta,
  type IInstruction,
  type IInstructionWithAccounts,
  type IInstructionWithData,
  type ReadonlyAccount,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/web3.js';
import { TOKEN_2022_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';

export const CREATE_NATIVE_MINT_DISCRIMINATOR = 27;

export function getCreateNativeMintDiscriminatorBytes() {
  return getU8Encoder().encode(CREATE_NATIVE_MINT_DISCRIMINATOR);
}

export type CreateNativeMintInstruction<
  TProgram extends string = typeof TOKEN_2022_PROGRAM_ADDRESS,
  TAccountPayer extends string | IAccountMeta<string> = string,
  TAccountNativeMint extends
    | string
    | IAccountMeta<string> = '9pan9bMn5HatX4EJdBwg9VgCa7Uz5HL8N1m5D3NdXejP',
  TAccountTokenProgram extends
    | string
    | IAccountMeta<string> = 'TokenzQdBNbLqP5VEhdkAS6EPFLC1PHnBqCXEpPxuEb',
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountPayer extends string
        ? WritableSignerAccount<TAccountPayer> &
            IAccountSignerMeta<TAccountPayer>
        : TAccountPayer,
      TAccountNativeMint extends string
        ? WritableAccount<TAccountNativeMint>
        : TAccountNativeMint,
      TAccountTokenProgram extends string
        ? ReadonlyAccount<TAccountTokenProgram>
        : TAccountTokenProgram,
      ...TRemainingAccounts,
    ]
  >;

export type CreateNativeMintInstructionData = { discriminator: number };

export type CreateNativeMintInstructionDataArgs = {};

export function getCreateNativeMintInstructionDataEncoder(): Encoder<CreateNativeMintInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([['discriminator', getU8Encoder()]]),
    (value) => ({ ...value, discriminator: CREATE_NATIVE_MINT_DISCRIMINATOR })
  );
}

export function getCreateNativeMintInstructionDataDecoder(): Decoder<CreateNativeMintInstructionData> {
  return getStructDecoder([['discriminator', getU8Decoder()]]);
}

export function getCreateNativeMintInstructionDataCodec(): Codec<
  CreateNativeMintInstructionDataArgs,
  CreateNativeMintInstructionData
> {
  return combineCodec(
    getCreateNativeMintInstructionDataEncoder(),
    getCreateNativeMintInstructionDataDecoder()
  );
}

export type CreateNativeMintInput<
  TAccountPayer extends string = string,
  TAccountNativeMint extends string = string,
  TAccountTokenProgram extends string = string,
> = {
  /** Funding account */
  payer: TransactionSigner<TAccountPayer>;
  /** The native mint address */
  nativeMint?: Address<TAccountNativeMint>;
  /** SPL Token program */
  tokenProgram?: Address<TAccountTokenProgram>;
};

export function getCreateNativeMintInstruction<
  TAccountPayer extends string,
  TAccountNativeMint extends string,
  TAccountTokenProgram extends string,
  TProgramAddress extends Address = typeof TOKEN_2022_PROGRAM_ADDRESS,
>(
  input: CreateNativeMintInput<
    TAccountPayer,
    TAccountNativeMint,
    TAccountTokenProgram
  >,
  config?: { programAddress?: TProgramAddress }
): CreateNativeMintInstruction<
  TProgramAddress,
  TAccountPayer,
  TAccountNativeMint,
  TAccountTokenProgram
> {
  // Program address.
  const programAddress = config?.programAddress ?? TOKEN_2022_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    payer: { value: input.payer ?? null, isWritable: true },
    nativeMint: { value: input.nativeMint ?? null, isWritable: true },
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Resolve default values.
  if (!accounts.nativeMint.value) {
    accounts.nativeMint.value =
      '9pan9bMn5HatX4EJdBwg9VgCa7Uz5HL8N1m5D3NdXejP' as Address<'9pan9bMn5HatX4EJdBwg9VgCa7Uz5HL8N1m5D3NdXejP'>;
  }
  if (!accounts.tokenProgram.value) {
    accounts.tokenProgram.value =
      'TokenzQdBNbLqP5VEhdkAS6EPFLC1PHnBqCXEpPxuEb' as Address<'TokenzQdBNbLqP5VEhdkAS6EPFLC1PHnBqCXEpPxuEb'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.payer),
      getAccountMeta(accounts.nativeMint),
      getAccountMeta(accounts.tokenProgram),
    ],
    programAddress,
    data: getCreateNativeMintInstructionDataEncoder().encode({}),
  } as CreateNativeMintInstruction<
    TProgramAddress,
    TAccountPayer,
    TAccountNativeMint,
    TAccountTokenProgram
  >;

  return instruction;
}

export type ParsedCreateNativeMintInstruction<
  TProgram extends string = typeof TOKEN_2022_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    /** Funding account */
    payer: TAccountMetas[0];
    /** The native mint address */
    nativeMint: TAccountMetas[1];
    /** SPL Token program */
    tokenProgram: TAccountMetas[2];
  };
  data: CreateNativeMintInstructionData;
};

export function parseCreateNativeMintInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>
): ParsedCreateNativeMintInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 3) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      payer: getNextAccount(),
      nativeMint: getNextAccount(),
      tokenProgram: getNextAccount(),
    },
    data: getCreateNativeMintInstructionDataDecoder().decode(instruction.data),
  };
}
