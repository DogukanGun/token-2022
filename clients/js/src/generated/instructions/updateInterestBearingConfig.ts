/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  AccountRole,
  combineCodec,
  getI16Decoder,
  getI16Encoder,
  getStructDecoder,
  getStructEncoder,
  getU8Decoder,
  getU8Encoder,
  transformEncoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type IAccountMeta,
  type IAccountSignerMeta,
  type IInstruction,
  type IInstructionWithAccounts,
  type IInstructionWithData,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/web3.js';
import { TOKEN_2022_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';

export const UPDATE_INTEREST_BEARING_CONFIG_DISCRIMINATOR = 33;

export function getUpdateInterestBearingConfigDiscriminatorBytes() {
  return getU8Encoder().encode(UPDATE_INTEREST_BEARING_CONFIG_DISCRIMINATOR);
}

export const UPDATE_INTEREST_BEARING_CONFIG_INTEREST_BEARING_CONFIG_DISCRIMINATOR = 1;

export function getUpdateInterestBearingConfigInterestBearingConfigDiscriminatorBytes() {
  return getU8Encoder().encode(
    UPDATE_INTEREST_BEARING_CONFIG_INTEREST_BEARING_CONFIG_DISCRIMINATOR
  );
}

export type UpdateInterestBearingConfigInstruction<
  TProgram extends string = typeof TOKEN_2022_PROGRAM_ADDRESS,
  TAccountMint extends string | IAccountMeta<string> = string,
  TAccountRateAuthority extends string | IAccountMeta<string> = string,
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountMint extends string
        ? WritableAccount<TAccountMint>
        : TAccountMint,
      TAccountRateAuthority extends string
        ? WritableSignerAccount<TAccountRateAuthority> &
            IAccountSignerMeta<TAccountRateAuthority>
        : TAccountRateAuthority,
      ...TRemainingAccounts,
    ]
  >;

export type UpdateInterestBearingConfigInstructionData = {
  discriminator: number;
  interestBearingConfigDiscriminator: number;
  /** Interest rate in basis points to update. */
  interestRateBasisPoints: number;
};

export type UpdateInterestBearingConfigInstructionDataArgs = {
  /** Interest rate in basis points to update. */
  interestRateBasisPoints: number;
};

export function getUpdateInterestBearingConfigInstructionDataEncoder(): Encoder<UpdateInterestBearingConfigInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', getU8Encoder()],
      ['interestBearingConfigDiscriminator', getU8Encoder()],
      ['interestRateBasisPoints', getI16Encoder()],
    ]),
    (value) => ({
      ...value,
      discriminator: UPDATE_INTEREST_BEARING_CONFIG_DISCRIMINATOR,
      interestBearingConfigDiscriminator:
        UPDATE_INTEREST_BEARING_CONFIG_INTEREST_BEARING_CONFIG_DISCRIMINATOR,
    })
  );
}

export function getUpdateInterestBearingConfigInstructionDataDecoder(): Decoder<UpdateInterestBearingConfigInstructionData> {
  return getStructDecoder([
    ['discriminator', getU8Decoder()],
    ['interestBearingConfigDiscriminator', getU8Decoder()],
    ['interestRateBasisPoints', getI16Decoder()],
  ]);
}

export function getUpdateInterestBearingConfigInstructionDataCodec(): Codec<
  UpdateInterestBearingConfigInstructionDataArgs,
  UpdateInterestBearingConfigInstructionData
> {
  return combineCodec(
    getUpdateInterestBearingConfigInstructionDataEncoder(),
    getUpdateInterestBearingConfigInstructionDataDecoder()
  );
}

export type UpdateInterestBearingConfigInput<
  TAccountMint extends string = string,
  TAccountRateAuthority extends string = string,
> = {
  /** The mint. */
  mint: Address<TAccountMint>;
  /** The mint rate authority. */
  rateAuthority: TransactionSigner<TAccountRateAuthority>;
  interestRateBasisPoints: UpdateInterestBearingConfigInstructionDataArgs['interestRateBasisPoints'];
  multiSigners?: Array<TransactionSigner>;
};

export function getUpdateInterestBearingConfigInstruction<
  TAccountMint extends string,
  TAccountRateAuthority extends string,
  TProgramAddress extends Address = typeof TOKEN_2022_PROGRAM_ADDRESS,
>(
  input: UpdateInterestBearingConfigInput<TAccountMint, TAccountRateAuthority>,
  config?: { programAddress?: TProgramAddress }
): UpdateInterestBearingConfigInstruction<
  TProgramAddress,
  TAccountMint,
  TAccountRateAuthority
> {
  // Program address.
  const programAddress = config?.programAddress ?? TOKEN_2022_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    mint: { value: input.mint ?? null, isWritable: true },
    rateAuthority: { value: input.rateAuthority ?? null, isWritable: true },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Remaining accounts.
  const remainingAccounts: IAccountMeta[] = (args.multiSigners ?? []).map(
    (signer) => ({
      address: signer.address,
      role: AccountRole.READONLY_SIGNER,
      signer,
    })
  );

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.mint),
      getAccountMeta(accounts.rateAuthority),
      ...remainingAccounts,
    ],
    programAddress,
    data: getUpdateInterestBearingConfigInstructionDataEncoder().encode(
      args as UpdateInterestBearingConfigInstructionDataArgs
    ),
  } as UpdateInterestBearingConfigInstruction<
    TProgramAddress,
    TAccountMint,
    TAccountRateAuthority
  >;

  return instruction;
}

export type ParsedUpdateInterestBearingConfigInstruction<
  TProgram extends string = typeof TOKEN_2022_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    /** The mint. */
    mint: TAccountMetas[0];
    /** The mint rate authority. */
    rateAuthority: TAccountMetas[1];
  };
  data: UpdateInterestBearingConfigInstructionData;
};

export function parseUpdateInterestBearingConfigInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>
): ParsedUpdateInterestBearingConfigInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 2) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      mint: getNextAccount(),
      rateAuthority: getNextAccount(),
    },
    data: getUpdateInterestBearingConfigInstructionDataDecoder().decode(
      instruction.data
    ),
  };
}
